LET zero =
    FUN f -> FUN x -> x
IN
LET succ =
    FUN n -> FUN f -> FUN x -> f (n f x)
IN
LET plus =
    FUN m -> FUN n -> FUN f -> FUN x -> m f (n f x)
IN
LET times =
    FUN m -> FUN n -> FUN f -> FUN x -> m (n f) x
IN
LET pred =
    FUN n -> FUN f -> FUN x -> n (FUN g -> FUN h -> h (g f)) (FUN u -> x) (FUN u -> u)
IN
LET one =
    succ zero
IN
LET two =
    succ one
IN
LET four =
    times two two
IN
LET six =
    plus two four
IN
LET true =
    FUN x -> FUN y -> x
IN
LET false =
    FUN x -> FUN y -> y
IN
LET iszero =
    FUN n -> n (FUN z -> false) true
IN
LET ifthenelse =
    FUN b -> FUN x -> FUN y -> b x y
IN
LET psiodfact =
    FUN f -> FUN n -> ifthenelse (iszero n) (one) (FUN g -> FUN x -> (times n (f (pred n))) g x)
IN
LET ycombinator =
    FUN psi -> (FUN x -> x x) (FUN x -> FUN y -> psi (x x) y)
IN
LET normalize =
    FUN n -> n succ zero
IN
normalize ((ycombinator psiodfact) (pred (pred six)))
